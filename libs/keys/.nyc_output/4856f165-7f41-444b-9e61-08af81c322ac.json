{"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\index.ts":{"path":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\index.ts","statementMap":{"0":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":464}},"2":{"start":{"line":8,"column":21},"end":{"line":8,"column":44}},"3":{"start":{"line":9,"column":0},"end":{"line":9,"column":42}},"4":{"start":{"line":10,"column":20},"end":{"line":10,"column":42}},"5":{"start":{"line":11,"column":0},"end":{"line":11,"column":40}},"6":{"start":{"line":12,"column":25},"end":{"line":12,"column":52}},"7":{"start":{"line":13,"column":0},"end":{"line":13,"column":50}},"8":{"start":{"line":14,"column":0},"end":{"line":14,"column":119}},"9":{"start":{"line":14,"column":81},"end":{"line":14,"column":113}},"10":{"start":{"line":15,"column":24},"end":{"line":15,"column":50}},"11":{"start":{"line":16,"column":0},"end":{"line":16,"column":48}},"12":{"start":{"line":17,"column":0},"end":{"line":17,"column":116}},"13":{"start":{"line":17,"column":80},"end":{"line":17,"column":110}},"14":{"start":{"line":18,"column":23},"end":{"line":18,"column":51}},"15":{"start":{"line":19,"column":0},"end":{"line":19,"column":46}},"16":{"start":{"line":20,"column":22},"end":{"line":20,"column":49}},"17":{"start":{"line":21,"column":0},"end":{"line":21,"column":44}},"18":{"start":{"line":22,"column":24},"end":{"line":22,"column":53}},"19":{"start":{"line":23,"column":0},"end":{"line":23,"column":48}},"20":{"start":{"line":24,"column":24},"end":{"line":24,"column":54}},"21":{"start":{"line":25,"column":0},"end":{"line":25,"column":48}},"22":{"start":{"line":26,"column":23},"end":{"line":26,"column":52}},"23":{"start":{"line":27,"column":0},"end":{"line":27,"column":46}},"24":{"start":{"line":28,"column":17},"end":{"line":28,"column":40}},"25":{"start":{"line":29,"column":0},"end":{"line":29,"column":34}},"26":{"start":{"line":30,"column":20},"end":{"line":30,"column":42}},"27":{"start":{"line":31,"column":0},"end":{"line":31,"column":40}},"28":{"start":{"line":32,"column":23},"end":{"line":32,"column":48}},"29":{"start":{"line":33,"column":0},"end":{"line":33,"column":46}},"30":{"start":{"line":34,"column":21},"end":{"line":34,"column":44}},"31":{"start":{"line":35,"column":0},"end":{"line":35,"column":42}},"32":{"start":{"line":36,"column":0},"end":{"line":36,"column":125}},"33":{"start":{"line":36,"column":86},"end":{"line":36,"column":119}},"34":{"start":{"line":37,"column":33},"end":{"line":37,"column":71}},"35":{"start":{"line":38,"column":0},"end":{"line":38,"column":66}},"36":{"start":{"line":39,"column":23},"end":{"line":39,"column":52}},"37":{"start":{"line":40,"column":0},"end":{"line":40,"column":46}},"38":{"start":{"line":41,"column":24},"end":{"line":41,"column":50}},"39":{"start":{"line":42,"column":0},"end":{"line":42,"column":48}},"40":{"start":{"line":43,"column":32},"end":{"line":43,"column":66}},"41":{"start":{"line":44,"column":0},"end":{"line":44,"column":64}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":14,"column":67},"end":{"line":14,"column":68}},"loc":{"start":{"line":14,"column":79},"end":{"line":14,"column":115}},"line":14},"1":{"name":"(anonymous_1)","decl":{"start":{"line":17,"column":66},"end":{"line":17,"column":67}},"loc":{"start":{"line":17,"column":78},"end":{"line":17,"column":112}},"line":17},"2":{"name":"(anonymous_2)","decl":{"start":{"line":36,"column":72},"end":{"line":36,"column":73}},"loc":{"start":{"line":36,"column":84},"end":{"line":36,"column":121}},"line":36}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":38,"10":1,"11":1,"12":1,"13":25,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":2,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1},"f":{"0":38,"1":25,"2":2},"b":{},"inputSourceMap":{"version":3,"file":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\index.ts","sources":["C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\index.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,6CAAsC;AAgBoE,qBAhBnG,oBAAU,CAgBmG;AAfpH,2CAAoC;AAekF,oBAf/G,mBAAS,CAe+G;AAd/H,qDAA2D;AAc8M,yBAdlQ,wBAAc,CAckQ;AAApD,wFAd1M,wBAAO,OAc0M;AAb1O,mDAAwD;AAa4J,wBAb7M,uBAAa,CAa6M;AAArB,uFAbpL,sBAAM,OAaoL;AAZlN,oDAA6C;AAYoF,uBAZ1H,sBAAY,CAY0H;AAX7I,kDAA2C;AAWoG,sBAXxI,qBAAW,CAWwI;AAV1J,sDAA+C;AAUtC,wBAVF,uBAAa,CAUE;AATtB,uDAAgD;AAS4G,wBATrJ,uBAAa,CASqJ;AARzK,qDAA8C;AAQ6H,uBARpK,sBAAY,CAQoK;AAPvL,yCAAkC;AAOkK,iBAP7L,gBAAM,CAO6L;AAN1M,2CAAoC;AAMqJ,oBANlL,mBAAS,CAMkL;AALlM,iDAA0C;AAKkM,uBALrO,sBAAY,CAKqO;AAHxP,6CAAwD;AAGlB,qBAH/B,oBAAU,CAG+B;AAAxB,6FAHH,yBAAY,OAGG;AAFpC,wEAAiE;AAEiB,iCAF3E,gCAAsB,CAE2E;AADxG,qDAA8C;AACsB,uBAD7D,sBAAY,CAC6D;AAEhF,mDAA4C;AAEnC,wBAFF,uBAAa,CAEE;AADtB,mEAA4D;AACpC,gCADjB,+BAAqB,CACiB","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport PrivateKey from './PrivateKey';\r\nimport PublicKey from './PublicKey';\r\nimport KeyTypeFactory, { KeyType } from './KeyTypeFactory';\r\nimport KeyUseFactory, { KeyUse } from './KeyUseFactory';\r\nimport EcPrivateKey from './ec/EcPrivateKey';\r\nimport EcPublicKey from './ec/EcPublicKey';\r\nimport OkpPrivateKey from './ec/OkpPrivateKey';\r\nimport RsaPrivateKey from './rsa/RsaPrivateKey';\r\nimport RsaPublicKey from './rsa/RsaPublicKey';\r\nimport OctKey from './Oct/OctKey';\r\nimport SecretKey from './SecretKey';\r\nimport KeyContainer from './KeyContainer';\r\nimport IKeyContainer, { CryptographicKey } from './IKeyContainer';\r\nimport JsonWebKey, { KeyOperation } from './JsonWebKey';\r\nimport EllipticCurveSubtleKey from './ec/EllipticCurveSubtleKey';\r\nimport RsaSubtleKey from './rsa/RsaSubtleKey';\r\nexport { OkpPrivateKey, KeyOperation, JsonWebKey, CryptographicKey, RsaSubtleKey, EllipticCurveSubtleKey, PrivateKey, PublicKey, EcPrivateKey, EcPublicKey, RsaPrivateKey, RsaPublicKey, SecretKey, OctKey, KeyUse, KeyUseFactory, KeyType, KeyContainer, IKeyContainer, KeyTypeFactory };\r\n\r\nimport JoseConstants from './JoseConstants';\r\nimport W3cCryptoApiConstants from './W3cCryptoApiConstants';\r\nexport { JoseConstants, W3cCryptoApiConstants };\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"1bd97aa26299b1cc798a406bee26e2f2289b9cb6","contentHash":"c790455fcc5b7b57ef646546cea880980a49cfaa37c5d6e8085b97630d853496"},"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\PrivateKey.ts":{"path":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\PrivateKey.ts","statementMap":{"0":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"1":{"start":{"line":7,"column":21},"end":{"line":7,"column":44}},"2":{"start":{"line":16,"column":0},"end":{"line":16,"column":29}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\PrivateKey.ts","sources":["C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\PrivateKey.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAGhG,6CAAsC;AAEtC;;;;;GAKG;AACH,MAA8B,UAAW,SAAQ,oBAAU;CAO1D;AAPD,6BAOC","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport PublicKey from './PublicKey';\r\nimport JsonWebKey from './JsonWebKey';\r\n\r\n/**\r\n * Represents a Private Key in JWK format.\r\n * @class\r\n * @abstract\r\n * @hideconstructor\r\n */\r\nexport default abstract class PrivateKey extends JsonWebKey {\r\n\r\n  /**\r\n   * Gets the corresponding public key\r\n   * @returns The corresponding {@link PublicKey}\r\n   */\r\n  abstract getPublicKey (): PublicKey;\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"2db81d7b7cf470cc36acc285e38aa9ae0c88f367","contentHash":"9b82f0119360386403d258b4489599cd8295fdd5b7ccdb3582ff7fd3317a1a14"},"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\JsonWebKey.ts":{"path":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\JsonWebKey.ts","statementMap":{"0":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":30}},"2":{"start":{"line":12,"column":0},"end":{"line":21,"column":71}},"3":{"start":{"line":13,"column":4},"end":{"line":13,"column":34}},"4":{"start":{"line":14,"column":4},"end":{"line":14,"column":38}},"5":{"start":{"line":15,"column":4},"end":{"line":15,"column":40}},"6":{"start":{"line":16,"column":4},"end":{"line":16,"column":40}},"7":{"start":{"line":17,"column":4},"end":{"line":17,"column":40}},"8":{"start":{"line":18,"column":4},"end":{"line":18,"column":44}},"9":{"start":{"line":19,"column":4},"end":{"line":19,"column":44}},"10":{"start":{"line":20,"column":4},"end":{"line":20,"column":46}},"11":{"start":{"line":36,"column":8},"end":{"line":36,"column":22}},"12":{"start":{"line":37,"column":8},"end":{"line":37,"column":27}},"13":{"start":{"line":38,"column":8},"end":{"line":38,"column":27}},"14":{"start":{"line":39,"column":8},"end":{"line":39,"column":27}},"15":{"start":{"line":40,"column":8},"end":{"line":40,"column":35}},"16":{"start":{"line":41,"column":8},"end":{"line":41,"column":27}},"17":{"start":{"line":44,"column":0},"end":{"line":44,"column":29}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":12,"column":1},"end":{"line":12,"column":2}},"loc":{"start":{"line":12,"column":25},"end":{"line":21,"column":1}},"line":12},"1":{"name":"(anonymous_1)","decl":{"start":{"line":32,"column":4},"end":{"line":32,"column":5}},"loc":{"start":{"line":32,"column":21},"end":{"line":42,"column":5}},"line":32}},"branchMap":{"0":{"loc":{"start":{"line":21,"column":18},"end":{"line":21,"column":69}},"type":"binary-expr","locations":[{"start":{"line":21,"column":18},"end":{"line":21,"column":38}},{"start":{"line":21,"column":43},"end":{"line":21,"column":68}}],"line":21}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":10,"12":10,"13":10,"14":10,"15":10,"16":10,"17":1},"f":{"0":1,"1":10},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"file":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\JsonWebKey.ts","sources":["C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\JsonWebKey.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAKhG;;GAEG;AACH,IAAY,YASX;AATD,WAAY,YAAY;IACtB,6BAAa,CAAA;IACb,iCAAiB,CAAA;IACjB,mCAAmB,CAAA;IACnB,mCAAmB,CAAA;IACnB,mCAAmB,CAAA;IACnB,uCAAuB,CAAA;IACvB,uCAAuB,CAAA;IACvB,yCAAyB,CAAA;AAC3B,CAAC,EATW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QASvB;AAED;;;;;GAKG;AACH,MAA8B,UAAU;IA0BrC;;OAEG;IACJ,YAAa,GAAe;QAvB5B;;WAEG;QACI,QAAG,GAAY,EAAE,CAAC;QAqBvB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;QACnB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;QACnB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;QAC3B,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;IACrB,CAAC;CAaF;AAhDD,6BAgDC","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport { KeyType } from './KeyTypeFactory';\r\nimport { KeyUse } from './KeyUseFactory';\r\n\r\n/**\r\n * JWK key operations\r\n */\r\nexport enum KeyOperation {\r\n  Sign = 'sign',\r\n  Verify = 'verify',\r\n  Encrypt = 'encrypt',\r\n  Decrypt = 'decrypt',\r\n  WrapKey = 'wrapKey',\r\n  UnwrapKey = 'unwrapKey',\r\n  DeriveKey = 'deriveKey',\r\n  DeriveBits = 'deriveBits'\r\n}\r\n\r\n/**\r\n * Represents a Public Key in JWK format.\r\n * @class\r\n * @abstract\r\n * @hideconstructor\r\n */\r\nexport default abstract class JsonWebKey {\r\n  /**\r\n   * Key type\r\n   */\r\n  public kty: KeyType;\r\n\r\n  /**\r\n   * Key ID\r\n   */\r\n  public kid?: string = '';\r\n\r\n  /**\r\n   * Intended use\r\n   */\r\n  public use?: KeyUse;\r\n\r\n  /**\r\n   * Valid key operations (key_ops)\r\n   */\r\n  public key_ops?: KeyOperation[];\r\n\r\n  /**\r\n   * Algorithm intended for use with this key\r\n   */\r\n  public alg?: string;\r\n\r\n   /**\r\n    * Create instance of @class JsonWebKey\r\n    */\r\n  constructor (key: JsonWebKey) {\r\n    this.kty = key.kty;\r\n    this.kid = key.kid;\r\n    this.use = key.use;\r\n    this.key_ops = key.key_ops;\r\n    this.alg = key.alg;\r\n  }\r\n\r\n  /**\r\n   * Obtains the thumbprint for the jwk parameter\r\n   * @param jwk JSON object representation of a JWK\r\n   */\r\n   /* We need to change the key id to a format #key<n>-<original thumbprint>-<key thumbprint> - todo\r\n  static async getThumbprint (publicKey: PublicKey): Promise<string> {\r\n    const key = await jose.JWK.asKey(publicKey);\r\n    const thumbprint = await key.thumbprint('SHA-512');\r\n    return base64url.encode(thumbprint);\r\n  }\r\n  */\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b352c42ee5bb177c7a10ce9d415ca2dcfbff1913","contentHash":"8bf8e6d220be14ca97f4fa407c3cbd93c3c3436402411a716f2d44b4e598b6e3"},"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\PublicKey.ts":{"path":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\PublicKey.ts","statementMap":{"0":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":30}},"2":{"start":{"line":8,"column":20},"end":{"line":8,"column":40}},"3":{"start":{"line":9,"column":21},"end":{"line":9,"column":44}},"4":{"start":{"line":10,"column":13},"end":{"line":10,"column":33}},"5":{"start":{"line":15,"column":0},"end":{"line":24,"column":71}},"6":{"start":{"line":16,"column":4},"end":{"line":16,"column":34}},"7":{"start":{"line":17,"column":4},"end":{"line":17,"column":38}},"8":{"start":{"line":18,"column":4},"end":{"line":18,"column":40}},"9":{"start":{"line":19,"column":4},"end":{"line":19,"column":40}},"10":{"start":{"line":20,"column":4},"end":{"line":20,"column":40}},"11":{"start":{"line":21,"column":4},"end":{"line":21,"column":44}},"12":{"start":{"line":22,"column":4},"end":{"line":22,"column":44}},"13":{"start":{"line":23,"column":4},"end":{"line":23,"column":46}},"14":{"start":{"line":37,"column":20},"end":{"line":37,"column":51}},"15":{"start":{"line":38,"column":27},"end":{"line":38,"column":58}},"16":{"start":{"line":39,"column":8},"end":{"line":39,"column":54}},"17":{"start":{"line":42,"column":0},"end":{"line":42,"column":28}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":15,"column":1},"end":{"line":15,"column":2}},"loc":{"start":{"line":15,"column":25},"end":{"line":24,"column":1}},"line":15},"1":{"name":"(anonymous_1)","decl":{"start":{"line":36,"column":4},"end":{"line":36,"column":5}},"loc":{"start":{"line":36,"column":42},"end":{"line":40,"column":5}},"line":36}},"branchMap":{"0":{"loc":{"start":{"line":24,"column":18},"end":{"line":24,"column":69}},"type":"binary-expr","locations":[{"start":{"line":24,"column":18},"end":{"line":24,"column":38}},{"start":{"line":24,"column":43},"end":{"line":24,"column":68}}],"line":24}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1},"f":{"0":1,"1":1},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"file":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\PublicKey.ts","sources":["C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\PublicKey.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,yCAAkC;AAClC,6CAAsC;AACtC,MAAM,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AAElC;;GAEG;AACH,IAAY,YASX;AATD,WAAY,YAAY;IACtB,6BAAa,CAAA;IACb,iCAAiB,CAAA;IACjB,mCAAmB,CAAA;IACnB,mCAAmB,CAAA;IACnB,mCAAmB,CAAA;IACnB,uCAAuB,CAAA;IACvB,uCAAuB,CAAA;IACvB,yCAAyB,CAAA;AAC3B,CAAC,EATW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QASvB;AAED;;;;;GAKG;AACH,MAA8B,SAAU,SAAQ,oBAAU;IACxD;;;OAGG;IACH,MAAM,CAAC,KAAK,CAAC,aAAa,CAAE,SAAoB;QAC9C,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAC5C,MAAM,UAAU,GAAG,MAAM,GAAG,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;QACnD,OAAO,mBAAS,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;CACF;AAVD,4BAUC","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport base64url from 'base64url';\r\nimport JsonWebKey from './JsonWebKey';\r\nconst jose = require('node-jose');\r\n\r\n/**\r\n * JWK key operations\r\n */\r\nexport enum KeyOperation {\r\n  Sign = 'sign',\r\n  Verify = 'verify',\r\n  Encrypt = 'encrypt',\r\n  Decrypt = 'decrypt',\r\n  WrapKey = 'wrapKey',\r\n  UnwrapKey = 'unwrapKey',\r\n  DeriveKey = 'deriveKey',\r\n  DeriveBits = 'deriveBits'\r\n}\r\n\r\n/**\r\n * Represents a Public Key in JWK format.\r\n * @class\r\n * @abstract\r\n * @hideconstructor\r\n */\r\nexport default abstract class PublicKey extends JsonWebKey {\r\n  /**\r\n   * Obtains the thumbprint for the jwk parameter\r\n   * @param jwk JSON object representation of a JWK\r\n   */\r\n  static async getThumbprint (publicKey: PublicKey): Promise<string> {\r\n    const key = await jose.JWK.asKey(publicKey);\r\n    const thumbprint = await key.thumbprint('SHA-256');\r\n    return base64url.encode(thumbprint);\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"10a4666b9339902310efbf3e8b9a2e86dfd4f4ae","contentHash":"f4d8ec7c52ff40dfdfba2e8bbbd5b22a8beb246abd47686467209c9f659e88b8"},"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\KeyTypeFactory.ts":{"path":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\KeyTypeFactory.ts","statementMap":{"0":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":25}},"2":{"start":{"line":12,"column":0},"end":{"line":17,"column":56}},"3":{"start":{"line":13,"column":4},"end":{"line":13,"column":27}},"4":{"start":{"line":14,"column":4},"end":{"line":14,"column":25}},"5":{"start":{"line":15,"column":4},"end":{"line":15,"column":27}},"6":{"start":{"line":16,"column":4},"end":{"line":16,"column":27}},"7":{"start":{"line":27,"column":8},"end":{"line":43,"column":9}},"8":{"start":{"line":29,"column":16},"end":{"line":29,"column":35}},"9":{"start":{"line":31,"column":16},"end":{"line":31,"column":34}},"10":{"start":{"line":33,"column":16},"end":{"line":33,"column":35}},"11":{"start":{"line":35,"column":16},"end":{"line":35,"column":34}},"12":{"start":{"line":37,"column":16},"end":{"line":37,"column":35}},"13":{"start":{"line":40,"column":16},"end":{"line":40,"column":35}},"14":{"start":{"line":42,"column":16},"end":{"line":42,"column":86}},"15":{"start":{"line":50,"column":8},"end":{"line":66,"column":9}},"16":{"start":{"line":56,"column":16},"end":{"line":56,"column":35}},"17":{"start":{"line":60,"column":16},"end":{"line":60,"column":35}},"18":{"start":{"line":65,"column":16},"end":{"line":65,"column":34}},"19":{"start":{"line":67,"column":8},"end":{"line":67,"column":63}},"20":{"start":{"line":70,"column":0},"end":{"line":70,"column":33}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":12,"column":1},"end":{"line":12,"column":2}},"loc":{"start":{"line":12,"column":20},"end":{"line":17,"column":1}},"line":12},"1":{"name":"(anonymous_1)","decl":{"start":{"line":26,"column":4},"end":{"line":26,"column":5}},"loc":{"start":{"line":26,"column":41},"end":{"line":44,"column":5}},"line":26},"2":{"name":"(anonymous_2)","decl":{"start":{"line":49,"column":4},"end":{"line":49,"column":5}},"loc":{"start":{"line":49,"column":29},"end":{"line":68,"column":5}},"line":49}},"branchMap":{"0":{"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":54}},"type":"binary-expr","locations":[{"start":{"line":17,"column":13},"end":{"line":17,"column":28}},{"start":{"line":17,"column":33},"end":{"line":17,"column":53}}],"line":17},"1":{"loc":{"start":{"line":27,"column":8},"end":{"line":43,"column":9}},"type":"switch","locations":[{"start":{"line":28,"column":12},"end":{"line":29,"column":35}},{"start":{"line":30,"column":12},"end":{"line":31,"column":34}},{"start":{"line":32,"column":12},"end":{"line":33,"column":35}},{"start":{"line":34,"column":12},"end":{"line":35,"column":34}},{"start":{"line":36,"column":12},"end":{"line":37,"column":35}},{"start":{"line":38,"column":12},"end":{"line":38,"column":28}},{"start":{"line":39,"column":12},"end":{"line":40,"column":35}},{"start":{"line":41,"column":12},"end":{"line":42,"column":86}}],"line":27},"2":{"loc":{"start":{"line":50,"column":8},"end":{"line":66,"column":9}},"type":"switch","locations":[{"start":{"line":51,"column":12},"end":{"line":51,"column":25}},{"start":{"line":52,"column":12},"end":{"line":52,"column":25}},{"start":{"line":53,"column":12},"end":{"line":53,"column":25}},{"start":{"line":54,"column":12},"end":{"line":54,"column":28}},{"start":{"line":55,"column":12},"end":{"line":56,"column":35}},{"start":{"line":57,"column":12},"end":{"line":57,"column":27}},{"start":{"line":58,"column":12},"end":{"line":58,"column":27}},{"start":{"line":59,"column":12},"end":{"line":60,"column":35}},{"start":{"line":61,"column":12},"end":{"line":61,"column":26}},{"start":{"line":62,"column":12},"end":{"line":62,"column":29}},{"start":{"line":63,"column":12},"end":{"line":63,"column":25}},{"start":{"line":64,"column":12},"end":{"line":65,"column":34}}],"line":50}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":8,"8":1,"9":1,"10":1,"11":1,"12":1,"13":2,"14":1,"15":13,"16":5,"17":3,"18":4,"19":1,"20":1},"f":{"0":1,"1":8,"2":13},"b":{"0":[1,1],"1":[1,1,1,1,1,1,2,1],"2":[1,2,3,4,5,1,2,3,1,2,3,4]},"inputSourceMap":{"version":3,"file":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\KeyTypeFactory.ts","sources":["C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\KeyTypeFactory.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG;;GAEG;AACH,IAAY,OAKX;AALD,WAAY,OAAO;IACjB,sBAAW,CAAA;IACX,oBAAS,CAAA;IACT,sBAAW,CAAA;IACX,sBAAW,CAAA;AACb,CAAC,EALW,OAAO,GAAP,eAAO,KAAP,eAAO,QAKlB;AAED;;GAEG;AACH,MAAqB,cAAc;IACjC;;;OAGG;IACI,MAAM,CAAC,kBAAkB,CAAE,SAAc;QAC9C,QAAQ,SAAS,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE;YACpC,KAAK,MAAM;gBACT,OAAO,OAAO,CAAC,GAAG,CAAC;YAErB,KAAK,OAAO;gBACV,OAAO,OAAO,CAAC,EAAE,CAAC;YAEpB,KAAK,OAAO;gBACV,OAAO,OAAO,CAAC,GAAG,CAAC;YAErB,KAAK,MAAM;gBACT,OAAO,OAAO,CAAC,EAAE,CAAC;YAEpB,KAAK,mBAAmB;gBACtB,OAAO,OAAO,CAAC,GAAG,CAAC;YAErB,KAAK,UAAU,CAAC;YAChB,KAAK,cAAc;gBACjB,OAAO,OAAO,CAAC,GAAG,CAAC;YAErB;gBACE,MAAM,IAAI,KAAK,CAAC,kBAAkB,SAAS,CAAC,IAAI,oBAAoB,CAAC,CAAC;SACzE;IACH,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,YAAY,CAAE,GAAW;QACrC,QAAQ,GAAG,CAAC,WAAW,EAAE,EAAE;YACzB,KAAK,OAAO,CAAC;YACb,KAAK,OAAO,CAAC;YACb,KAAK,OAAO,CAAC;YACb,KAAK,UAAU,CAAC;YAChB,KAAK,cAAc;gBACjB,OAAO,OAAO,CAAC,GAAG,CAAC;YACrB,KAAK,SAAS,CAAC;YACf,KAAK,SAAS,CAAC;YACf,KAAK,SAAS;gBACb,OAAO,OAAO,CAAC,GAAG,CAAC;YACpB,KAAK,QAAQ,CAAC;YACd,KAAK,WAAW,CAAC;YACjB,KAAK,OAAO,CAAC;YACb,KAAK,OAAO;gBACX,OAAO,OAAO,CAAC,EAAE,CAAC;SACpB;QAED,MAAM,IAAI,KAAK,CAAC,cAAc,GAAG,oBAAoB,CAAC,CAAC;IACzD,CAAC;CACF;AAxDD,iCAwDC","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Enumeration to model key types.\r\n */\r\nexport enum KeyType {\r\n  Oct = 'oct',\r\n  EC = 'EC',\r\n  RSA = 'RSA',\r\n  OKP = 'OKP'\r\n}\r\n\r\n/**\r\n * Factory class to create @enum KeyType objects\r\n */\r\nexport default class KeyTypeFactory {\r\n  /**\r\n   * Create the key type according to the selected algorithm.\r\n   * @param algorithm Web crypto compliant algorithm object\r\n   */\r\n  public static createViaWebCrypto (algorithm: any): KeyType {\r\n    switch (algorithm.name.toLowerCase()) {\r\n      case 'hmac':\r\n        return KeyType.Oct;\r\n\r\n      case 'ecdsa':\r\n        return KeyType.EC;\r\n\r\n      case 'eddsa':\r\n        return KeyType.OKP;\r\n\r\n      case 'ecdh':\r\n        return KeyType.EC;\r\n\r\n      case 'rsassa-pkcs1-v1_5':\r\n        return KeyType.RSA;\r\n\r\n      case 'rsa-oaep':\r\n      case 'rsa-oaep-256':\r\n        return KeyType.RSA;\r\n\r\n      default:\r\n        throw new Error(`The algorithm '${algorithm.name}' is not supported`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create the key type according to the selected JWA algorithm.\r\n   * @param alg JWA name\r\n   */\r\n  public static createViaJwa (alg: string): KeyType {\r\n    switch (alg.toLowerCase()) {\r\n      case 'rs256':\r\n      case 'rs384':\r\n      case 'rs512':\r\n      case 'rsa-oaep':\r\n      case 'rsa-oaep-256':\r\n        return KeyType.RSA;\r\n      case 'a128gcm':\r\n      case 'a256gcm':\r\n      case 'a192gcm':\r\n       return KeyType.Oct;\r\n      case 'es256k':\r\n      case 'secp256k1':\r\n      case 'ecdsa':\r\n      case 'eddsa':\r\n       return KeyType.EC;\r\n    }\r\n\r\n    throw new Error(`Algorithm '${alg}' is not supported`);\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"73f13edf69f0b1d6b5c665c62fc0af51ce3b7ac1","contentHash":"5ae79fd5877ac113d63f1a7b470f7225b514f80547cd4eb60ee469fa37db35bc"},"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\KeyUseFactory.ts":{"path":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\KeyUseFactory.ts","statementMap":{"0":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":24}},"2":{"start":{"line":12,"column":0},"end":{"line":15,"column":53}},"3":{"start":{"line":13,"column":4},"end":{"line":13,"column":33}},"4":{"start":{"line":14,"column":4},"end":{"line":14,"column":32}},"5":{"start":{"line":25,"column":8},"end":{"line":41,"column":9}},"6":{"start":{"line":27,"column":16},"end":{"line":27,"column":40}},"7":{"start":{"line":29,"column":16},"end":{"line":29,"column":40}},"8":{"start":{"line":31,"column":16},"end":{"line":31,"column":40}},"9":{"start":{"line":33,"column":16},"end":{"line":33,"column":41}},"10":{"start":{"line":35,"column":16},"end":{"line":35,"column":40}},"11":{"start":{"line":38,"column":16},"end":{"line":38,"column":41}},"12":{"start":{"line":40,"column":16},"end":{"line":40,"column":86}},"13":{"start":{"line":48,"column":8},"end":{"line":63,"column":9}},"14":{"start":{"line":56,"column":16},"end":{"line":56,"column":40}},"15":{"start":{"line":62,"column":16},"end":{"line":62,"column":41}},"16":{"start":{"line":64,"column":8},"end":{"line":64,"column":63}},"17":{"start":{"line":67,"column":0},"end":{"line":67,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":12,"column":1},"end":{"line":12,"column":2}},"loc":{"start":{"line":12,"column":19},"end":{"line":15,"column":1}},"line":12},"1":{"name":"(anonymous_1)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":41},"end":{"line":42,"column":5}},"line":24},"2":{"name":"(anonymous_2)","decl":{"start":{"line":47,"column":4},"end":{"line":47,"column":5}},"loc":{"start":{"line":47,"column":29},"end":{"line":65,"column":5}},"line":47}},"branchMap":{"0":{"loc":{"start":{"line":15,"column":12},"end":{"line":15,"column":51}},"type":"binary-expr","locations":[{"start":{"line":15,"column":12},"end":{"line":15,"column":26}},{"start":{"line":15,"column":31},"end":{"line":15,"column":50}}],"line":15},"1":{"loc":{"start":{"line":25,"column":8},"end":{"line":41,"column":9}},"type":"switch","locations":[{"start":{"line":26,"column":12},"end":{"line":27,"column":40}},{"start":{"line":28,"column":12},"end":{"line":29,"column":40}},{"start":{"line":30,"column":12},"end":{"line":31,"column":40}},{"start":{"line":32,"column":12},"end":{"line":33,"column":41}},{"start":{"line":34,"column":12},"end":{"line":35,"column":40}},{"start":{"line":36,"column":12},"end":{"line":36,"column":28}},{"start":{"line":37,"column":12},"end":{"line":38,"column":41}},{"start":{"line":39,"column":12},"end":{"line":40,"column":86}}],"line":25},"2":{"loc":{"start":{"line":48,"column":8},"end":{"line":63,"column":9}},"type":"switch","locations":[{"start":{"line":49,"column":12},"end":{"line":49,"column":25}},{"start":{"line":50,"column":12},"end":{"line":50,"column":25}},{"start":{"line":51,"column":12},"end":{"line":51,"column":25}},{"start":{"line":52,"column":12},"end":{"line":52,"column":26}},{"start":{"line":53,"column":12},"end":{"line":53,"column":29}},{"start":{"line":54,"column":12},"end":{"line":54,"column":25}},{"start":{"line":55,"column":12},"end":{"line":56,"column":40}},{"start":{"line":57,"column":12},"end":{"line":57,"column":28}},{"start":{"line":58,"column":12},"end":{"line":58,"column":32}},{"start":{"line":59,"column":12},"end":{"line":59,"column":27}},{"start":{"line":60,"column":12},"end":{"line":60,"column":27}},{"start":{"line":61,"column":12},"end":{"line":62,"column":41}}],"line":48}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":8,"6":1,"7":1,"8":1,"9":1,"10":1,"11":2,"12":1,"13":12,"14":6,"15":5,"16":1,"17":1},"f":{"0":1,"1":8,"2":12},"b":{"0":[1,1],"1":[1,1,1,1,1,1,2,1],"2":[1,2,3,4,5,6,6,1,2,3,4,5]},"inputSourceMap":{"version":3,"file":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\KeyUseFactory.ts","sources":["C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\KeyUseFactory.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG;;GAEG;AACH,IAAY,MAGX;AAHD,WAAY,MAAM;IAChB,4BAAkB,CAAA;IAClB,2BAAiB,CAAA;AACnB,CAAC,EAHW,MAAM,GAAN,cAAM,KAAN,cAAM,QAGjB;AAED;;GAEG;AACH,MAAqB,aAAa;IAChC;;;OAGG;IACI,MAAM,CAAC,kBAAkB,CAAE,SAAc;QAC9C,QAAQ,SAAS,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE;YACpC,KAAK,MAAM;gBACT,OAAO,MAAM,CAAC,SAAS,CAAC;YAE1B,KAAK,OAAO;gBACV,OAAO,MAAM,CAAC,SAAS,CAAC;YAE1B,KAAK,OAAO;gBACV,OAAO,MAAM,CAAC,SAAS,CAAC;YAE1B,KAAK,MAAM;gBACT,OAAO,MAAM,CAAC,UAAU,CAAC;YAE3B,KAAK,mBAAmB;gBACtB,OAAO,MAAM,CAAC,SAAS,CAAC;YAE1B,KAAK,UAAU,CAAC;YAChB,KAAK,cAAc;gBACjB,OAAO,MAAM,CAAC,UAAU,CAAC;YAE3B;gBACE,MAAM,IAAI,KAAK,CAAC,kBAAkB,SAAS,CAAC,IAAI,oBAAoB,CAAC,CAAC;SACzE;IACH,CAAC;IAED;;;OAGG;IACK,MAAM,CAAC,YAAY,CAAE,GAAW;QACtC,QAAQ,GAAG,CAAC,WAAW,EAAE,EAAE;YACzB,KAAK,OAAO,CAAC;YACb,KAAK,OAAO,CAAC;YACb,KAAK,OAAO,CAAC;YACb,KAAK,QAAQ,CAAC;YACd,KAAK,WAAW,CAAC;YACjB,KAAK,OAAO,CAAC;YACb,KAAK,OAAO;gBACV,OAAO,MAAM,CAAC,SAAS,CAAC;YAC1B,KAAK,UAAU,CAAC;YAChB,KAAK,cAAc,CAAC;YACpB,KAAK,SAAS,CAAC;YACf,KAAK,SAAS,CAAC;YACf,KAAK,SAAS;gBACZ,OAAO,MAAM,CAAC,UAAU,CAAC;SAC5B;QAED,MAAM,IAAI,KAAK,CAAC,cAAc,GAAG,oBAAoB,CAAC,CAAC;IACzD,CAAC;CACF;AAvDD,gCAuDC","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Enumeration to model key use.\r\n */\r\nexport enum KeyUse {\r\n  Encryption = 'enc',\r\n  Signature = 'sig'\r\n}\r\n\r\n/**\r\n * Factory class to create @enum KeyUse objects.\r\n */\r\nexport default class KeyUseFactory {\r\n  /**\r\n   * Create the key use according to the selected algorithm.\r\n   * @param algorithm Web crypto compliant algorithm object\r\n   */\r\n  public static createViaWebCrypto (algorithm: any): KeyUse {\r\n    switch (algorithm.name.toLowerCase()) {\r\n      case 'hmac':\r\n        return KeyUse.Signature;\r\n\r\n      case 'ecdsa':\r\n        return KeyUse.Signature;\r\n\r\n      case 'eddsa':\r\n        return KeyUse.Signature;\r\n\r\n      case 'ecdh':\r\n        return KeyUse.Encryption;\r\n\r\n      case 'rsassa-pkcs1-v1_5':\r\n        return KeyUse.Signature;\r\n\r\n      case 'rsa-oaep':\r\n      case 'rsa-oaep-256':\r\n        return KeyUse.Encryption;\r\n\r\n      default:\r\n        throw new Error(`The algorithm '${algorithm.name}' is not supported`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create the key use according to the selected JWA algorithm.\r\n   * @param alg JWA name\r\n   */\r\n   public static createViaJwa (alg: string): KeyUse {\r\n    switch (alg.toLowerCase()) {\r\n      case 'rs256':\r\n      case 'rs384':\r\n      case 'rs512':\r\n      case 'es256k':\r\n      case 'secp256k1':\r\n      case 'ecdsa':\r\n      case 'eddsa':\r\n        return KeyUse.Signature;\r\n      case 'rsa-oaep':\r\n      case 'rsa-oaep-256':\r\n      case 'a128gcm':\r\n      case 'a256gcm':\r\n      case 'a192gcm':\r\n        return KeyUse.Encryption;\r\n    }\r\n\r\n    throw new Error(`Algorithm '${alg}' is not supported`);\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"4fff6bbfca11c434386316fccf02dfc2e484723f","contentHash":"912791784dec517d584935424248d0311302e5a6cb3c073eb2068a04aaac23c4"},"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\ec\\EcPrivateKey.ts":{"path":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\ec\\EcPrivateKey.ts","statementMap":{"0":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"1":{"start":{"line":7,"column":22},"end":{"line":7,"column":46}},"2":{"start":{"line":8,"column":20},"end":{"line":8,"column":40}},"3":{"start":{"line":9,"column":14},"end":{"line":9,"column":30}},"4":{"start":{"line":20,"column":8},"end":{"line":20,"column":19}},"5":{"start":{"line":24,"column":8},"end":{"line":24,"column":31}},"6":{"start":{"line":25,"column":8},"end":{"line":25,"column":87}},"7":{"start":{"line":32,"column":26},"end":{"line":32,"column":37}},"8":{"start":{"line":33,"column":8},"end":{"line":33,"column":27}},"9":{"start":{"line":34,"column":8},"end":{"line":34,"column":25}},"10":{"start":{"line":37,"column":0},"end":{"line":37,"column":31}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":19,"column":4},"end":{"line":19,"column":5}},"loc":{"start":{"line":19,"column":21},"end":{"line":26,"column":5}},"line":19},"1":{"name":"(anonymous_1)","decl":{"start":{"line":31,"column":4},"end":{"line":31,"column":5}},"loc":{"start":{"line":31,"column":19},"end":{"line":35,"column":5}},"line":31}},"branchMap":{"0":{"loc":{"start":{"line":25,"column":17},"end":{"line":25,"column":86}},"type":"cond-expr","locations":[{"start":{"line":25,"column":45},"end":{"line":25,"column":50}},{"start":{"line":25,"column":53},"end":{"line":25,"column":86}}],"line":25}},"s":{"0":1,"1":1,"2":1,"3":1,"4":2,"5":2,"6":2,"7":2,"8":2,"9":2,"10":1},"f":{"0":2,"1":2},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"file":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\ec\\EcPrivateKey.ts","sources":["C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\ec\\EcPrivateKey.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,+CAAwC;AAGxC,yCAAkC;AAClC,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAE/B;;;;GAIG;AACH,MAAqB,YAAa,SAAQ,qBAAW;IAWnD;;OAEG;IACH,YAAa,GAAQ;QACnB,KAAK,CAAC,GAAG,CAAC,CAAC;QAdb;;WAEG;QACM,QAAG,GAAW,WAAW,CAAC;QAYjC,IAAI,CAAC,CAAC,GAAG,OAAO,GAAG,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,mBAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACxE,CAAC;IAED;;;OAGG;IACI,YAAY;QACjB,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;QAC9B,OAAO,SAAS,CAAC,CAAC,CAAC;QACnB,OAAO,SAAS,CAAC;IACnB,CAAC;CACF;AA5BD,+BA4BC","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport EcPublicKey from './EcPublicKey';\r\nimport PrivateKey from '../PrivateKey';\r\nimport PublicKey from '../PublicKey';\r\nimport base64url from 'base64url';\r\nconst clone = require('clone');\r\n\r\n/**\r\n * Represents an Elliptic Curve private key\r\n * @class\r\n * @extends PrivateKey\r\n */\r\nexport default class EcPrivateKey extends EcPublicKey implements PrivateKey {\r\n  /**\r\n   * ECDSA w/ secp256k1 Curve\r\n   */\r\n  readonly alg: string = 'secp256k1';\r\n\r\n  /**\r\n   * Private exponent\r\n   */\r\n  public d: string;\r\n\r\n  /**\r\n   * Create instance of @class EcPrivateKey\r\n   */\r\n  constructor (key: any) {\r\n    super(key);\r\n    this.d = typeof key.d === 'string' ?  key.d : base64url.encode(key.d);\r\n  }\r\n\r\n  /**\r\n   * Gets the corresponding public key\r\n   * @returns The corresponding {@link PublicKey}\r\n   */\r\n  public getPublicKey (): PublicKey {\r\n    const publicKey = clone(this);\r\n    delete publicKey.d;\r\n    return publicKey;\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ba014abafcccc8bd832510dd4961a4ccf0c2d516","contentHash":"06ff8994ff472e87b68c5263e23bf9149ef39ff479f9221dba585564cddb948d"},"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\ec\\EcPublicKey.ts":{"path":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\ec\\EcPublicKey.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":7,"column":25},"end":{"line":7,"column":53}},"2":{"start":{"line":8,"column":21},"end":{"line":8,"column":45}},"3":{"start":{"line":9,"column":20},"end":{"line":9,"column":40}},"4":{"start":{"line":20,"column":8},"end":{"line":20,"column":19}},"5":{"start":{"line":21,"column":8},"end":{"line":21,"column":27}},"6":{"start":{"line":22,"column":8},"end":{"line":22,"column":87}},"7":{"start":{"line":23,"column":8},"end":{"line":31,"column":9}},"8":{"start":{"line":25,"column":12},"end":{"line":25,"column":91}},"9":{"start":{"line":26,"column":12},"end":{"line":26,"column":51}},"10":{"start":{"line":29,"column":12},"end":{"line":29,"column":31}},"11":{"start":{"line":30,"column":12},"end":{"line":30,"column":52}},"12":{"start":{"line":34,"column":0},"end":{"line":34,"column":30}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":19,"column":4},"end":{"line":19,"column":5}},"loc":{"start":{"line":19,"column":21},"end":{"line":32,"column":5}},"line":19}},"branchMap":{"0":{"loc":{"start":{"line":22,"column":17},"end":{"line":22,"column":86}},"type":"cond-expr","locations":[{"start":{"line":22,"column":45},"end":{"line":22,"column":50}},{"start":{"line":22,"column":53},"end":{"line":22,"column":86}}],"line":22},"1":{"loc":{"start":{"line":23,"column":8},"end":{"line":31,"column":9}},"type":"if","locations":[{"start":{"line":23,"column":8},"end":{"line":31,"column":9}},{"start":{"line":23,"column":8},"end":{"line":31,"column":9}}],"line":23},"2":{"loc":{"start":{"line":25,"column":21},"end":{"line":25,"column":90}},"type":"cond-expr","locations":[{"start":{"line":25,"column":49},"end":{"line":25,"column":54}},{"start":{"line":25,"column":57},"end":{"line":25,"column":90}}],"line":25}},"s":{"0":1,"1":1,"2":1,"3":1,"4":6,"5":6,"6":6,"7":6,"8":4,"9":4,"10":2,"11":2,"12":1},"f":{"0":6},"b":{"0":[4,2],"1":[4,2],"2":[3,1]},"inputSourceMap":{"version":3,"file":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\ec\\EcPublicKey.ts","sources":["C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\ec\\EcPublicKey.ts"],"names":[],"mappings":";;AAAA;;;gGAGgG;AAChG,sDAA4C;AAC5C,8CAAuC;AAEvC,yCAAkC;AAElC;;;;GAIG;AACH,MAAqB,WAAY,SAAQ,oBAAU;IAcjD;;OAEG;IACH,YAAa,GAAgB;QAC3B,KAAK,CAAC,GAAG,CAAC,CAAC;QACX,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;QACnB,IAAI,CAAC,CAAC,GAAG,OAAO,GAAG,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,mBAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACtE,IAAI,GAAG,CAAC,CAAC,EAAE;YACT,eAAe;YACf,IAAI,CAAC,CAAC,GAAG,OAAO,GAAG,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,mBAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACtE,IAAI,CAAC,GAAG,GAAG,wBAAO,CAAC,EAAE,CAAC;SACvB;aAAM;YACL,IAAI,CAAC,CAAC,GAAQ,SAAS,CAAC;YACxB,IAAI,CAAC,GAAG,GAAG,wBAAO,CAAC,GAAG,CAAC;SACxB;IACH,CAAC;CACF;AA9BD,8BA8BC","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { KeyType } from '../KeyTypeFactory';\r\nimport JsonWebKey from '../JsonWebKey';\r\nimport PublicKey from '../PublicKey';\r\nimport base64url from 'base64url';\r\n\r\n/**\r\n * Represents an Elliptic Curve public key\r\n * @class\r\n * @extends PublicKey\r\n */\r\nexport default class EcPublicKey extends JsonWebKey implements PublicKey {\r\n  /**\r\n   * curve\r\n   */\r\n  public crv: string | undefined;\r\n  /**\r\n   * x co-ordinate\r\n   */\r\n  public x: string;\r\n  /**\r\n   * y co-ordinate\r\n   */\r\n  public y: string;\r\n  \r\n  /**\r\n   * Create instance of @class EcPublicKey\r\n   */\r\n  constructor (key: EcPublicKey) {\r\n    super(key);\r\n    this.crv = key.crv;\r\n    this.x = typeof key.x === 'string' ?  key.x : base64url.encode(key.x);\r\n    if (key.y) {\r\n      // No y for OPK\r\n      this.y = typeof key.y === 'string' ?  key.y : base64url.encode(key.y);\r\n      this.kty = KeyType.EC;\r\n    } else {\r\n      this.y = <any>undefined;\r\n      this.kty = KeyType.OKP;\r\n    }\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"50cd925629d7d941b6228ba90875fae9c8632711","contentHash":"ece93f607c59d55cdf02e7d13c43a58c0684d7d7de23250e7a7a89d7d7767db6"},"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\ec\\OkpPrivateKey.ts":{"path":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\ec\\OkpPrivateKey.ts","statementMap":{"0":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"1":{"start":{"line":7,"column":22},"end":{"line":7,"column":46}},"2":{"start":{"line":8,"column":14},"end":{"line":8,"column":30}},"3":{"start":{"line":19,"column":8},"end":{"line":19,"column":19}},"4":{"start":{"line":23,"column":8},"end":{"line":23,"column":27}},"5":{"start":{"line":24,"column":8},"end":{"line":24,"column":23}},"6":{"start":{"line":31,"column":26},"end":{"line":31,"column":37}},"7":{"start":{"line":32,"column":8},"end":{"line":32,"column":27}},"8":{"start":{"line":33,"column":8},"end":{"line":33,"column":25}},"9":{"start":{"line":36,"column":0},"end":{"line":36,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":18,"column":4},"end":{"line":18,"column":5}},"loc":{"start":{"line":18,"column":21},"end":{"line":25,"column":5}},"line":18},"1":{"name":"(anonymous_1)","decl":{"start":{"line":30,"column":4},"end":{"line":30,"column":5}},"loc":{"start":{"line":30,"column":19},"end":{"line":34,"column":5}},"line":30}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":2,"7":2,"8":2,"9":1},"f":{"0":1,"1":2},"b":{},"inputSourceMap":{"version":3,"file":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\ec\\OkpPrivateKey.ts","sources":["C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\ec\\OkpPrivateKey.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,+CAAwC;AAGxC,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAE/B;;;;GAIG;AACH,MAAqB,aAAc,SAAQ,qBAAW;IAWpD;;OAEG;IACH,YAAa,GAAQ;QACnB,KAAK,CAAC,GAAG,CAAC,CAAC;QAdb;;WAEG;QACM,QAAG,GAAW,OAAO,CAAC;QAY7B,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;IACjB,CAAC;IAED;;;OAGG;IACI,YAAY;QACjB,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;QAC9B,OAAO,SAAS,CAAC,CAAC,CAAC;QACnB,OAAO,SAAS,CAAC;IACnB,CAAC;CACF;AA5BD,gCA4BC","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport EcPublicKey from './EcPublicKey';\r\nimport PrivateKey from '../PrivateKey';\r\nimport PublicKey from '../PublicKey';\r\nconst clone = require('clone');\r\n\r\n/**\r\n * Represents an Elliptic Curve private key\r\n * @class\r\n * @extends PrivateKey\r\n */\r\nexport default class OkpPrivateKey extends EcPublicKey implements PrivateKey {\r\n  /**\r\n   * EdDSA w/ ed25519 Curve\r\n   */\r\n  readonly alg: string = 'EdDSA';\r\n\r\n  /**\r\n   * Private exponent\r\n   */\r\n  public d: string;\r\n\r\n  /**\r\n   * Create instance of @class EcPrivateKey\r\n   */\r\n  constructor (key: any) {\r\n    super(key);\r\n    this.d = key.d;\r\n  }\r\n\r\n  /**\r\n   * Gets the corresponding public key\r\n   * @returns The corresponding {@link PublicKey}\r\n   */\r\n  public getPublicKey (): PublicKey {\r\n    const publicKey = clone(this);\r\n    delete publicKey.d;\r\n    return publicKey;\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"3c74e65bd39d053baaf17def880f933e0dacc29c","contentHash":"bef082b9753fa936dcc1e4f3786a30790285ccf87e0c34506d7b9fa0c65beb97"},"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\rsa\\RsaPrivateKey.ts":{"path":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\rsa\\RsaPrivateKey.ts","statementMap":{"0":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"1":{"start":{"line":7,"column":23},"end":{"line":7,"column":48}},"2":{"start":{"line":8,"column":20},"end":{"line":8,"column":40}},"3":{"start":{"line":9,"column":14},"end":{"line":9,"column":30}},"4":{"start":{"line":20,"column":8},"end":{"line":20,"column":19}},"5":{"start":{"line":21,"column":8},"end":{"line":21,"column":87}},"6":{"start":{"line":22,"column":8},"end":{"line":22,"column":87}},"7":{"start":{"line":23,"column":8},"end":{"line":23,"column":87}},"8":{"start":{"line":24,"column":8},"end":{"line":24,"column":91}},"9":{"start":{"line":25,"column":8},"end":{"line":25,"column":91}},"10":{"start":{"line":26,"column":8},"end":{"line":26,"column":91}},"11":{"start":{"line":33,"column":26},"end":{"line":33,"column":37}},"12":{"start":{"line":34,"column":8},"end":{"line":34,"column":27}},"13":{"start":{"line":35,"column":8},"end":{"line":35,"column":27}},"14":{"start":{"line":36,"column":8},"end":{"line":36,"column":27}},"15":{"start":{"line":37,"column":8},"end":{"line":37,"column":28}},"16":{"start":{"line":38,"column":8},"end":{"line":38,"column":28}},"17":{"start":{"line":39,"column":8},"end":{"line":39,"column":28}},"18":{"start":{"line":40,"column":8},"end":{"line":40,"column":25}},"19":{"start":{"line":43,"column":0},"end":{"line":43,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":19,"column":4},"end":{"line":19,"column":5}},"loc":{"start":{"line":19,"column":21},"end":{"line":27,"column":5}},"line":19},"1":{"name":"(anonymous_1)","decl":{"start":{"line":32,"column":4},"end":{"line":32,"column":5}},"loc":{"start":{"line":32,"column":19},"end":{"line":41,"column":5}},"line":32}},"branchMap":{"0":{"loc":{"start":{"line":21,"column":17},"end":{"line":21,"column":86}},"type":"cond-expr","locations":[{"start":{"line":21,"column":45},"end":{"line":21,"column":50}},{"start":{"line":21,"column":53},"end":{"line":21,"column":86}}],"line":21},"1":{"loc":{"start":{"line":22,"column":17},"end":{"line":22,"column":86}},"type":"cond-expr","locations":[{"start":{"line":22,"column":45},"end":{"line":22,"column":50}},{"start":{"line":22,"column":53},"end":{"line":22,"column":86}}],"line":22},"2":{"loc":{"start":{"line":23,"column":17},"end":{"line":23,"column":86}},"type":"cond-expr","locations":[{"start":{"line":23,"column":45},"end":{"line":23,"column":50}},{"start":{"line":23,"column":53},"end":{"line":23,"column":86}}],"line":23},"3":{"loc":{"start":{"line":24,"column":18},"end":{"line":24,"column":90}},"type":"cond-expr","locations":[{"start":{"line":24,"column":47},"end":{"line":24,"column":53}},{"start":{"line":24,"column":56},"end":{"line":24,"column":90}}],"line":24},"4":{"loc":{"start":{"line":25,"column":18},"end":{"line":25,"column":90}},"type":"cond-expr","locations":[{"start":{"line":25,"column":47},"end":{"line":25,"column":53}},{"start":{"line":25,"column":56},"end":{"line":25,"column":90}}],"line":25},"5":{"loc":{"start":{"line":26,"column":18},"end":{"line":26,"column":90}},"type":"cond-expr","locations":[{"start":{"line":26,"column":47},"end":{"line":26,"column":53}},{"start":{"line":26,"column":56},"end":{"line":26,"column":90}}],"line":26}},"s":{"0":1,"1":1,"2":1,"3":1,"4":2,"5":2,"6":2,"7":2,"8":2,"9":2,"10":2,"11":4,"12":4,"13":4,"14":4,"15":4,"16":4,"17":4,"18":4,"19":1},"f":{"0":2,"1":4},"b":{"0":[1,1],"1":[1,1],"2":[1,1],"3":[1,1],"4":[1,1],"5":[1,1]},"inputSourceMap":{"version":3,"file":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\rsa\\RsaPrivateKey.ts","sources":["C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\rsa\\RsaPrivateKey.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,iDAA0C;AAG1C,yCAAkC;AAClC,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAE/B;;;;GAIG;AACH,MAAqB,aAAc,SAAQ,sBAAY;IA2BrD;;OAEG;IACH,YAAa,GAAQ;QACnB,KAAK,CAAC,GAAG,CAAC,CAAC;QACX,IAAI,CAAC,CAAC,GAAG,OAAO,GAAG,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,mBAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACtE,IAAI,CAAC,CAAC,GAAG,OAAO,GAAG,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,mBAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACtE,IAAI,CAAC,CAAC,GAAG,OAAO,GAAG,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,mBAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACtE,IAAI,CAAC,EAAE,GAAG,OAAO,GAAG,CAAC,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAS,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAC1E,IAAI,CAAC,EAAE,GAAG,OAAO,GAAG,CAAC,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAS,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAC1E,IAAI,CAAC,EAAE,GAAG,OAAO,GAAG,CAAC,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAS,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAC5E,CAAC;IAED;;;OAGG;IACI,YAAY;QACjB,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;QAC9B,OAAO,SAAS,CAAC,CAAC,CAAC;QACnB,OAAO,SAAS,CAAC,CAAC,CAAC;QACnB,OAAO,SAAS,CAAC,CAAC,CAAC;QACnB,OAAO,SAAS,CAAC,EAAE,CAAC;QACpB,OAAO,SAAS,CAAC,EAAE,CAAC;QACpB,OAAO,SAAS,CAAC,EAAE,CAAC;QACpB,OAAO,SAAS,CAAC;IACnB,CAAC;CACF;AAtDD,gCAsDC","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport RsaPublicKey from './RsaPublicKey';\r\nimport PrivateKey from '../PrivateKey';\r\nimport PublicKey from '../PublicKey';\r\nimport base64url from 'base64url';\r\nconst clone = require('clone');\r\n\r\n/**\r\n * Represents an Elliptic Curve private key\r\n * @class\r\n * @extends PrivateKey\r\n */\r\nexport default class RsaPrivateKey extends RsaPublicKey implements PrivateKey {\r\n\r\n  /**\r\n   * Private exponent\r\n   */\r\n  public d: string;\r\n  /**\r\n   * Prime p\r\n   */\r\n  public p: string;\r\n  /**\r\n   * Prime q\r\n   */\r\n  public q: string;\r\n  /**\r\n   * Private dp\r\n   */\r\n  public dp: string;\r\n  /**\r\n   * Private dq\r\n   */\r\n  public dq: string;\r\n  /**\r\n   * Private qi\r\n   */\r\n  public qi: string;\r\n\r\n  /**\r\n   * Create instance of @class RsaPrivateKey\r\n   */\r\n  constructor (key: any) {\r\n    super(key);\r\n    this.d = typeof key.d === 'string' ?  key.d : base64url.encode(key.d);\r\n    this.p = typeof key.p === 'string' ?  key.p : base64url.encode(key.p);\r\n    this.q = typeof key.q === 'string' ?  key.q : base64url.encode(key.q);\r\n    this.dp = typeof key.dp === 'string' ?  key.dp : base64url.encode(key.dp);\r\n    this.dq = typeof key.dq === 'string' ?  key.dq : base64url.encode(key.dq);\r\n    this.qi = typeof key.qi === 'string' ?  key.qi : base64url.encode(key.qi);\r\n  }\r\n\r\n  /**\r\n   * Gets the corresponding public key\r\n   * @returns The corresponding {@link PublicKey}\r\n   */\r\n  public getPublicKey (): PublicKey {\r\n    const publicKey = clone(this);\r\n    delete publicKey.d;\r\n    delete publicKey.p;\r\n    delete publicKey.q;\r\n    delete publicKey.dp;\r\n    delete publicKey.dq;\r\n    delete publicKey.qi;\r\n    return publicKey;\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"4e936334f9cae07c7230c95b6dedf48151fe6703","contentHash":"f93a88b37d7df3bec368c11696a74531fc934ec557eeb52dfb314f07a4002e9f"},"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\rsa\\RsaPublicKey.ts":{"path":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\rsa\\RsaPublicKey.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":7,"column":25},"end":{"line":7,"column":53}},"2":{"start":{"line":8,"column":21},"end":{"line":8,"column":45}},"3":{"start":{"line":9,"column":20},"end":{"line":9,"column":40}},"4":{"start":{"line":20,"column":8},"end":{"line":20,"column":19}},"5":{"start":{"line":24,"column":8},"end":{"line":24,"column":48}},"6":{"start":{"line":28,"column":8},"end":{"line":28,"column":27}},"7":{"start":{"line":29,"column":8},"end":{"line":29,"column":27}},"8":{"start":{"line":30,"column":8},"end":{"line":30,"column":35}},"9":{"start":{"line":31,"column":8},"end":{"line":31,"column":27}},"10":{"start":{"line":32,"column":8},"end":{"line":32,"column":27}},"11":{"start":{"line":33,"column":8},"end":{"line":33,"column":87}},"12":{"start":{"line":34,"column":8},"end":{"line":34,"column":87}},"13":{"start":{"line":37,"column":0},"end":{"line":37,"column":31}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":19,"column":4},"end":{"line":19,"column":5}},"loc":{"start":{"line":19,"column":21},"end":{"line":35,"column":5}},"line":19}},"branchMap":{"0":{"loc":{"start":{"line":33,"column":17},"end":{"line":33,"column":86}},"type":"cond-expr","locations":[{"start":{"line":33,"column":45},"end":{"line":33,"column":50}},{"start":{"line":33,"column":53},"end":{"line":33,"column":86}}],"line":33},"1":{"loc":{"start":{"line":34,"column":17},"end":{"line":34,"column":86}},"type":"cond-expr","locations":[{"start":{"line":34,"column":45},"end":{"line":34,"column":50}},{"start":{"line":34,"column":53},"end":{"line":34,"column":86}}],"line":34}},"s":{"0":1,"1":1,"2":1,"3":1,"4":3,"5":3,"6":3,"7":3,"8":3,"9":3,"10":3,"11":3,"12":3,"13":1},"f":{"0":3},"b":{"0":[2,1],"1":[2,1]},"inputSourceMap":{"version":3,"file":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\rsa\\RsaPublicKey.ts","sources":["C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\rsa\\RsaPublicKey.ts"],"names":[],"mappings":";;AAAA;;;gGAGgG;AAChG,sDAA4C;AAC5C,8CAAuC;AACvC,yCAAkC;AAElC;;;;GAIG;AACH,MAAqB,YAAa,SAAQ,oBAAU;IAkBlD;;OAEG;IACH,YAAa,GAAQ;QACnB,KAAK,CAAC,GAAG,CAAC,CAAC;QAbb;;WAEG;QACH,QAAG,GAAG,wBAAO,CAAC,GAAG,CAAC;QAClB;;WAEG;QACH,QAAG,GAAG,OAAO,CAAC;QAOZ,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;QAC3B,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;QACnB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;QACnB,IAAI,CAAC,CAAC,GAAG,OAAO,GAAG,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,mBAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACtE,IAAI,CAAC,CAAC,GAAG,OAAO,GAAG,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,mBAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACxE,CAAC;CACF;AA9BD,+BA8BC","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { KeyType } from '../KeyTypeFactory';\r\nimport JsonWebKey from '../JsonWebKey';\r\nimport base64url from 'base64url';\r\n\r\n/**\r\n * Represents an RSA public key\r\n * @class\r\n * @extends PublicKey\r\n */\r\nexport default class RsaPublicKey extends JsonWebKey {\r\n  /**\r\n   * Public exponent\r\n   */\r\n  public e: string;\r\n  /**\r\n   * Modulus\r\n   */\r\n  public n: string;\r\n  /**\r\n   * Set the EC key type\r\n   */\r\n  kty = KeyType.RSA;\r\n  /**\r\n   * Set the default algorithm\r\n   */\r\n  alg = 'RS256';\r\n\r\n  /**\r\n   * Create instance of @class RsaPublicKey\r\n   */\r\n  constructor (key: any) {\r\n    super(key);\r\n    this.alg = key.alg;\r\n    this.key_ops = key.key_ops;\r\n    this.kid = key.kid;\r\n    this.use = key.use;\r\n    this.e = typeof key.e === 'string' ?  key.e : base64url.encode(key.e);\r\n    this.n = typeof key.n === 'string' ?  key.n : base64url.encode(key.n);\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"e342d6308537052fc89bbd2766022cfa271138a0","contentHash":"d0a3e6f07c74427e9872c2d8a480bce9c223ad73fc5262745fd9678801cabdde"},"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\Oct\\OctKey.ts":{"path":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\Oct\\OctKey.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":7,"column":25},"end":{"line":7,"column":53}},"2":{"start":{"line":8,"column":21},"end":{"line":8,"column":45}},"3":{"start":{"line":19,"column":8},"end":{"line":19,"column":53}},"4":{"start":{"line":23,"column":8},"end":{"line":23,"column":48}},"5":{"start":{"line":24,"column":8},"end":{"line":24,"column":21}},"6":{"start":{"line":27,"column":0},"end":{"line":27,"column":25}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":18,"column":4},"end":{"line":18,"column":5}},"loc":{"start":{"line":18,"column":21},"end":{"line":25,"column":5}},"line":18}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1},"f":{"0":1},"b":{},"inputSourceMap":{"version":3,"file":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\Oct\\OctKey.ts","sources":["C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\Oct\\OctKey.ts"],"names":[],"mappings":";;AAAA;;;gGAGgG;AAChG,sDAA4C;AAC5C,8CAAuC;AAGtC;;;;GAIG;AACJ,MAAqB,MAAO,SAAQ,oBAAU;IAW3C;;OAEG;IACJ,YAAa,GAAW;QACtB,KAAK,CAAC,EAAE,GAAG,EAAE,wBAAO,CAAC,GAAG,EAAE,CAAC,CAAC;QAT7B;;WAEG;QACJ,QAAG,GAAG,wBAAO,CAAC,GAAG,CAAC;QAOhB,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC;IACf,CAAC;CACF;AAlBD,yBAkBC","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { KeyType } from '../KeyTypeFactory';\r\nimport JsonWebKey from '../JsonWebKey';\r\nimport SecretKey from '../SecretKey';\r\n\r\n /**\r\n  * Represents an OCT key\r\n  * @class\r\n  * @extends JsonWebKey\r\n  */\r\nexport default class OctKey extends JsonWebKey implements SecretKey {\r\n   /**\r\n    * secret\r\n    */\r\n  public k: string;\r\n\r\n   /**\r\n    * Set the Oct key type\r\n    */\r\n  kty = KeyType.Oct;\r\n\r\n   /**\r\n    * Create instance of @class EcPublicKey\r\n    */\r\n  constructor (key: string) {\r\n    super({ kty: KeyType.Oct });\r\n    this.k = key;\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"1f3b959bf0ea78fec01e6c891cd0df6101d87077","contentHash":"9d1655d6e3733bdcb27aae42cf8e32009dbadcf24498f31d30662e1b03993d35"},"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\SecretKey.ts":{"path":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\SecretKey.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":7,"column":21},"end":{"line":7,"column":44}},"2":{"start":{"line":15,"column":0},"end":{"line":15,"column":28}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\SecretKey.ts","sources":["C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\SecretKey.ts"],"names":[],"mappings":";;AAAA;;;gGAGgG;AAChG,6CAAsC;AAErC;;;;GAIG;AACJ,MAA8B,SAAU,SAAQ,oBAAU;CACxD;AADF,4BACE","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport JsonWebKey from './JsonWebKey';\r\n\r\n /**\r\n  * Represents an OCT key\r\n  * @class\r\n  * @extends JsonWebKey\r\n  */\r\nexport default abstract class SecretKey extends JsonWebKey {\r\n }\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b425fe45e77768df50ff97206f222449b2b411e8","contentHash":"4acc5f60bad36822501e7b9e4aa2aea2a6c91a883e55c374e524de96682f5b39"},"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\KeyContainer.ts":{"path":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\KeyContainer.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":13,"column":8},"end":{"line":13,"column":26}},"2":{"start":{"line":19,"column":8},"end":{"line":19,"column":32}},"3":{"start":{"line":25,"column":8},"end":{"line":25,"column":32}},"4":{"start":{"line":31,"column":8},"end":{"line":31,"column":32}},"5":{"start":{"line":38,"column":8},"end":{"line":40,"column":9}},"6":{"start":{"line":39,"column":12},"end":{"line":39,"column":112}},"7":{"start":{"line":41,"column":8},"end":{"line":43,"column":9}},"8":{"start":{"line":42,"column":12},"end":{"line":42,"column":112}},"9":{"start":{"line":44,"column":8},"end":{"line":44,"column":28}},"10":{"start":{"line":51,"column":8},"end":{"line":51,"column":47}},"11":{"start":{"line":57,"column":8},"end":{"line":59,"column":9}},"12":{"start":{"line":58,"column":12},"end":{"line":58,"column":85}},"13":{"start":{"line":60,"column":8},"end":{"line":60,"column":21}},"14":{"start":{"line":63,"column":0},"end":{"line":63,"column":31}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":12,"column":4},"end":{"line":12,"column":5}},"loc":{"start":{"line":12,"column":21},"end":{"line":14,"column":5}},"line":12},"1":{"name":"(anonymous_1)","decl":{"start":{"line":18,"column":4},"end":{"line":18,"column":5}},"loc":{"start":{"line":18,"column":14},"end":{"line":20,"column":5}},"line":18},"2":{"name":"(anonymous_2)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":14},"end":{"line":26,"column":5}},"line":24},"3":{"name":"(anonymous_3)","decl":{"start":{"line":30,"column":4},"end":{"line":30,"column":5}},"loc":{"start":{"line":30,"column":14},"end":{"line":32,"column":5}},"line":30},"4":{"name":"(anonymous_4)","decl":{"start":{"line":36,"column":4},"end":{"line":36,"column":5}},"loc":{"start":{"line":36,"column":13},"end":{"line":45,"column":5}},"line":36},"5":{"name":"(anonymous_5)","decl":{"start":{"line":49,"column":4},"end":{"line":49,"column":5}},"loc":{"start":{"line":49,"column":13},"end":{"line":52,"column":5}},"line":49},"6":{"name":"(anonymous_6)","decl":{"start":{"line":56,"column":4},"end":{"line":56,"column":5}},"loc":{"start":{"line":56,"column":16},"end":{"line":61,"column":5}},"line":56}},"branchMap":{"0":{"loc":{"start":{"line":38,"column":8},"end":{"line":40,"column":9}},"type":"if","locations":[{"start":{"line":38,"column":8},"end":{"line":40,"column":9}},{"start":{"line":38,"column":8},"end":{"line":40,"column":9}}],"line":38},"1":{"loc":{"start":{"line":38,"column":12},"end":{"line":38,"column":58}},"type":"binary-expr","locations":[{"start":{"line":38,"column":12},"end":{"line":38,"column":34}},{"start":{"line":38,"column":38},"end":{"line":38,"column":58}}],"line":38},"2":{"loc":{"start":{"line":41,"column":8},"end":{"line":43,"column":9}},"type":"if","locations":[{"start":{"line":41,"column":8},"end":{"line":43,"column":9}},{"start":{"line":41,"column":8},"end":{"line":43,"column":9}}],"line":41},"3":{"loc":{"start":{"line":41,"column":12},"end":{"line":41,"column":58}},"type":"binary-expr","locations":[{"start":{"line":41,"column":12},"end":{"line":41,"column":34}},{"start":{"line":41,"column":38},"end":{"line":41,"column":58}}],"line":41},"4":{"loc":{"start":{"line":57,"column":8},"end":{"line":59,"column":9}},"type":"if","locations":[{"start":{"line":57,"column":8},"end":{"line":59,"column":9}},{"start":{"line":57,"column":8},"end":{"line":59,"column":9}}],"line":57},"5":{"loc":{"start":{"line":57,"column":12},"end":{"line":57,"column":44}},"type":"binary-expr","locations":[{"start":{"line":57,"column":12},"end":{"line":57,"column":24}},{"start":{"line":57,"column":28},"end":{"line":57,"column":44}}],"line":57},"6":{"loc":{"start":{"line":58,"column":19},"end":{"line":58,"column":84}},"type":"binary-expr","locations":[{"start":{"line":58,"column":19},"end":{"line":58,"column":41}},{"start":{"line":58,"column":45},"end":{"line":58,"column":84}}],"line":58}},"s":{"0":1,"1":1,"2":5,"3":4,"4":1,"5":3,"6":1,"7":2,"8":1,"9":1,"10":6,"11":3,"12":2,"13":1,"14":1},"f":{"0":1,"1":5,"2":4,"3":1,"4":3,"5":6,"6":3},"b":{"0":[1,2],"1":[3,3],"2":[1,1],"3":[2,2],"4":[2,1],"5":[3,2],"6":[2,2]},"inputSourceMap":{"version":3,"file":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\KeyContainer.ts","sources":["C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\KeyContainer.ts"],"names":[],"mappings":";;AAQA;;;;GAIG;AACH,MAAqB,YAAY;IAC9B;;OAEG;IACJ,YAAa,GAAqB;QAChC,IAAI,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;IACpB,CAAC;IAOD;;OAEG;IACH,IAAW,GAAG;QACZ,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,IAAW,GAAG;QACZ,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,IAAW,GAAG;QACZ,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IAC1B,CAAC;IAED;;OAEG;IACI,GAAG,CAAE,GAAqB;QAC/B,6BAA6B;QAC7B,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,GAAG,CAAC,GAAG,KAAK,IAAI,CAAC,GAAG,EAAE;YAClD,MAAM,IAAI,KAAK,CAAC,8BAA8B,GAAG,CAAC,GAAG,kCAAkC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;SACrG;QAED,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,GAAG,CAAC,GAAG,KAAK,IAAI,CAAC,GAAG,EAAE;YAClD,MAAM,IAAI,KAAK,CAAC,8BAA8B,GAAG,CAAC,GAAG,kCAAkC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;SACrG;QAED,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACtB,CAAC;IAEA;;OAEG;IACG,MAAM;QACV,gCAAgC;QACjC,OAAQ,IAAI,CAAC,IAAY,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAClD,CAAC;IAED;;OAEG;IACI,SAAS;QACd,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE;YACpC,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,IAAK,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;SAC3E;QAED,OAAO,KAAK,CAAC;IACf,CAAC;CAEF;AArED,+BAqEC","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { KeyUse } from './KeyUseFactory';\r\nimport { KeyType } from './KeyTypeFactory';\r\nimport IKeyContainer, { CryptographicKey } from './IKeyContainer';\r\n\r\n/**\r\n * Represents a Key container in JWK format.\r\n * A key container will hold different versions of JWK keys.\r\n * Each key in the key container is the same type and usage\r\n */\r\nexport default class KeyContainer implements IKeyContainer {\r\n   /**\r\n    * Create instance of @class KeyContainer\r\n    */\r\n  constructor (key: CryptographicKey) {\r\n    this.keys = [key];\r\n  }\r\n\r\n   /**\r\n    * Return all keys in the container\r\n    */\r\n  public keys: CryptographicKey[];\r\n\r\n  /**\r\n   * Key type\r\n   */\r\n  public get kty (): KeyType {\r\n    return this.keys[0].kty;\r\n  }\r\n\r\n  /**\r\n   * Intended use\r\n   */\r\n  public get use (): KeyUse | undefined {\r\n    return this.keys[0].use;\r\n  }\r\n\r\n  /**\r\n   * Algorithm intended for use with this key\r\n   */\r\n  public get alg (): string | undefined {\r\n    return this.keys[0].alg;\r\n  }\r\n\r\n  /**\r\n   * Algorithm intended for use with this key\r\n   */\r\n  public add (key: CryptographicKey): void {\r\n    // Check for valid key to add\r\n    if (this.keys.length !== 0 && key.kty !== this.kty) {\r\n      throw new Error(`Cannot add a key with kty '${key.kty}' to a key container with kty '${this.kty}'`);\r\n    }\r\n\r\n    if (this.keys.length !== 0 && key.use !== this.use) {\r\n      throw new Error(`Cannot add a key with use '${key.use}' to a key container with use '${this.use}'`);\r\n    }\r\n\r\n    this.keys.push(key);\r\n  }\r\n\r\n   /**\r\n    * Get the default key from the key container\r\n    */\r\n  public getKey<T= CryptographicKey> (): T {\r\n     // return last keys as reference\r\n    return (this.keys as any)[this.keys.length - 1];\r\n  }\r\n  \r\n  /**\r\n   * True if private key is a remote key\r\n   */\r\n  public remotekey (): boolean {\r\n    if (this.keys[0] && this.keys[0].kid) {\r\n      return this.keys.length !== 0 &&  this.keys[0].kid.startsWith('https://');\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"96bb406aecb7c5dddd576e7422110702389e4a08","contentHash":"8e903772aa696bd1642aa596bebd9abeeba4a58208ef6022da5d20d1997e466a"},"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\ec\\EllipticCurveSubtleKey.ts":{"path":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\ec\\EllipticCurveSubtleKey.ts","statementMap":{"0":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"1":{"start":{"line":7,"column":25},"end":{"line":7,"column":50}},"2":{"start":{"line":22,"column":8},"end":{"line":22,"column":16}},"3":{"start":{"line":23,"column":8},"end":{"line":23,"column":35}},"4":{"start":{"line":24,"column":8},"end":{"line":24,"column":25}},"5":{"start":{"line":25,"column":8},"end":{"line":25,"column":29}},"6":{"start":{"line":26,"column":8},"end":{"line":26,"column":39}},"7":{"start":{"line":27,"column":8},"end":{"line":27,"column":23}},"8":{"start":{"line":30,"column":0},"end":{"line":30,"column":41}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":21,"column":4},"end":{"line":21,"column":5}},"loc":{"start":{"line":21,"column":59},"end":{"line":28,"column":5}},"line":21}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1},"f":{"0":1},"b":{},"inputSourceMap":{"version":3,"file":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\ec\\EllipticCurveSubtleKey.ts","sources":["C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\ec\\EllipticCurveSubtleKey.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,mDAA2C;AAE3C;;;GAGG;AACH,MAAqB,sBAAuB,SAAQ,0BAAS;IA2B3D;;;;;;;OAOG;IACH,YAAa,SAAuB,EAAE,WAAoB,EAAE,MAAkB,EAAE,IAAa,EAAE,GAAQ;QACrG,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACjB,CAAC;CACF;AA3CD,yCA2CC","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport { CryptoKey } from 'webcrypto-core';\r\n\r\n/**\r\n * Implementation of the CryptoKey for elliptic curve\r\n * based keys.\r\n */\r\nexport default class EllipticCurveSubtleKey extends CryptoKey {\r\n  /**\r\n   *\r\n   * Gets the specification of the algorithm\r\n   */\r\n  public algorithm: KeyAlgorithm;\r\n\r\n  /**\r\n   * Key type\r\n   */\r\n  public type: KeyType;\r\n\r\n  /**\r\n   * Different usages supported by the provider\r\n   */\r\n  public usages: KeyUsage[];\r\n\r\n  /**\r\n   * True if key is exportable\r\n   */\r\n  public extractable: boolean;\r\n\r\n  /**\r\n   * The elliptic curve key\r\n   */\r\n  public key: any;\r\n\r\n  /**\r\n   * Create an instance of EllipticSubtleCurveKey\r\n   * @param algorithm for the key\r\n   * @param extractable True if key can be extracted\r\n   * @param usages for the key\r\n   * @param type of the key (private || public)\r\n   * @param key to be used\r\n   */\r\n  constructor (algorithm: KeyAlgorithm, extractable: boolean, usages: KeyUsage[], type: KeyType, key: any) {\r\n    super();\r\n    this.algorithm = algorithm;\r\n    this.type = type;\r\n    this.usages = usages;\r\n    this.extractable = extractable;\r\n    this.key = key;\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"536f3036cddc6e4b094d8ae9c9d324d651a5f4e0","contentHash":"9b46563cb6246e66fbedd986c3d195332b581af4c5e04b71ab03773ba2668bd0"},"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\rsa\\RsaSubtleKey.ts":{"path":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\rsa\\RsaSubtleKey.ts","statementMap":{"0":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"1":{"start":{"line":7,"column":25},"end":{"line":7,"column":50}},"2":{"start":{"line":22,"column":8},"end":{"line":22,"column":16}},"3":{"start":{"line":23,"column":8},"end":{"line":23,"column":35}},"4":{"start":{"line":24,"column":8},"end":{"line":24,"column":25}},"5":{"start":{"line":25,"column":8},"end":{"line":25,"column":29}},"6":{"start":{"line":26,"column":8},"end":{"line":26,"column":39}},"7":{"start":{"line":27,"column":8},"end":{"line":27,"column":23}},"8":{"start":{"line":30,"column":0},"end":{"line":30,"column":31}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":21,"column":4},"end":{"line":21,"column":5}},"loc":{"start":{"line":21,"column":59},"end":{"line":28,"column":5}},"line":21}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1},"f":{"0":1},"b":{},"inputSourceMap":{"version":3,"file":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\rsa\\RsaSubtleKey.ts","sources":["C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\rsa\\RsaSubtleKey.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,mDAA2C;AAE3C;;;GAGG;AACH,MAAqB,YAAa,SAAQ,0BAAS;IA2BjD;;;;;;;OAOG;IACH,YAAa,SAAuB,EAAE,WAAoB,EAAE,MAAkB,EAAE,IAAa,EAAE,GAAQ;QACrG,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACjB,CAAC;CACF;AA3CD,+BA2CC","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport { CryptoKey } from 'webcrypto-core';\r\n\r\n/**\r\n * Implementation of the CryptoKey for RSA\r\n * based keys.\r\n */\r\nexport default class RsaSubtleKey extends CryptoKey {\r\n  /**\r\n   *\r\n   * Gets the specification of the algorithm\r\n   */\r\n  public algorithm: KeyAlgorithm;\r\n\r\n  /**\r\n   * Key type\r\n   */\r\n  public type: KeyType;\r\n\r\n  /**\r\n   * Different usages supported by the provider\r\n   */\r\n  public usages: KeyUsage[];\r\n\r\n  /**\r\n   * True if key is exportable\r\n   */\r\n  public extractable: boolean;\r\n\r\n  /**\r\n   * The elliptic curve key\r\n   */\r\n  public key: any;\r\n\r\n  /**\r\n   * Create an instance of RsaSubtleKey\r\n   * @param algorithm for the key\r\n   * @param extractable True if key can be extracted\r\n   * @param usages for the key\r\n   * @param type of the key (private || public)\r\n   * @param key to be used\r\n   */\r\n  constructor (algorithm: KeyAlgorithm, extractable: boolean, usages: KeyUsage[], type: KeyType, key: any) {\r\n    super();\r\n    this.algorithm = algorithm;\r\n    this.type = type;\r\n    this.usages = usages;\r\n    this.extractable = extractable;\r\n    this.key = key;\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"564aa6acea6064608e1ad2acd9711e4ac7250a91","contentHash":"7b458f8692d9bcb2ba12a2f01982c1a9b6ed39fc63231101a91c043c2b952996"},"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\JoseConstants.ts":{"path":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\JoseConstants.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":10,"column":34},"end":{"line":170,"column":4}},"2":{"start":{"line":16,"column":4},"end":{"line":16,"column":32}},"3":{"start":{"line":20,"column":4},"end":{"line":20,"column":30}},"4":{"start":{"line":24,"column":4},"end":{"line":24,"column":30}},"5":{"start":{"line":28,"column":4},"end":{"line":28,"column":46}},"6":{"start":{"line":32,"column":4},"end":{"line":32,"column":39}},"7":{"start":{"line":36,"column":4},"end":{"line":36,"column":34}},"8":{"start":{"line":40,"column":4},"end":{"line":40,"column":34}},"9":{"start":{"line":44,"column":4},"end":{"line":44,"column":34}},"10":{"start":{"line":48,"column":4},"end":{"line":48,"column":34}},"11":{"start":{"line":52,"column":4},"end":{"line":52,"column":36}},"12":{"start":{"line":56,"column":4},"end":{"line":56,"column":40}},"13":{"start":{"line":60,"column":4},"end":{"line":60,"column":40}},"14":{"start":{"line":64,"column":4},"end":{"line":64,"column":40}},"15":{"start":{"line":68,"column":4},"end":{"line":68,"column":34}},"16":{"start":{"line":72,"column":4},"end":{"line":72,"column":37}},"17":{"start":{"line":76,"column":4},"end":{"line":76,"column":34}},"18":{"start":{"line":80,"column":4},"end":{"line":80,"column":65}},"19":{"start":{"line":84,"column":4},"end":{"line":84,"column":30}},"20":{"start":{"line":88,"column":4},"end":{"line":88,"column":30}},"21":{"start":{"line":92,"column":4},"end":{"line":92,"column":30}},"22":{"start":{"line":96,"column":4},"end":{"line":96,"column":47}},"23":{"start":{"line":100,"column":4},"end":{"line":100,"column":51}},"24":{"start":{"line":104,"column":4},"end":{"line":104,"column":35}},"25":{"start":{"line":108,"column":4},"end":{"line":108,"column":33}},"26":{"start":{"line":112,"column":4},"end":{"line":112,"column":49}},"27":{"start":{"line":116,"column":4},"end":{"line":116,"column":35}},"28":{"start":{"line":120,"column":4},"end":{"line":120,"column":49}},"29":{"start":{"line":124,"column":4},"end":{"line":124,"column":43}},"30":{"start":{"line":128,"column":4},"end":{"line":128,"column":49}},"31":{"start":{"line":132,"column":4},"end":{"line":132,"column":47}},"32":{"start":{"line":136,"column":4},"end":{"line":136,"column":41}},"33":{"start":{"line":140,"column":4},"end":{"line":140,"column":60}},"34":{"start":{"line":144,"column":4},"end":{"line":144,"column":42}},"35":{"start":{"line":148,"column":4},"end":{"line":148,"column":48}},"36":{"start":{"line":152,"column":4},"end":{"line":152,"column":82}},"37":{"start":{"line":156,"column":4},"end":{"line":156,"column":59}},"38":{"start":{"line":160,"column":4},"end":{"line":160,"column":59}},"39":{"start":{"line":164,"column":4},"end":{"line":164,"column":65}},"40":{"start":{"line":168,"column":4},"end":{"line":168,"column":65}},"41":{"start":{"line":169,"column":4},"end":{"line":169,"column":25}},"42":{"start":{"line":171,"column":0},"end":{"line":171,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":10,"column":35},"end":{"line":10,"column":36}},"loc":{"start":{"line":10,"column":41},"end":{"line":170,"column":1}},"line":10}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1},"f":{"0":1},"b":{},"inputSourceMap":{"version":3,"file":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\JoseConstants.ts","sources":["C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\JoseConstants.ts"],"names":[],"mappings":";;AACA;;;gGAGgG;AAChG;;IAEI;AACH;IAAA,MAAqB,aAAa;;IAEjC;;OAEG;IACY,kBAAI,GAAG,MAAM,CAAC;IAE7B;;OAEG;IACY,iBAAG,GAAG,KAAK,CAAC;IAE3B;;OAEG;IACY,iBAAG,GAAG,KAAK,CAAC;IAE3B;;OAEG;IACY,wBAAU,GAAG,cAAc,CAAC;IAE3C;;OAEG;IACY,qBAAO,GAAG,UAAU,CAAC;IAEnC;;MAEE;IACY,mBAAK,GAAG,OAAO,CAAC;IAE/B;;OAEG;IACY,mBAAK,GAAG,OAAO,CAAC;IAE/B;;OAEG;IACW,mBAAK,GAAG,OAAO,CAAC;IAE9B;;OAEG;IACY,mBAAK,GAAG,OAAO,CAAC;IAE/B;;OAEG;IACY,oBAAM,GAAG,QAAQ,CAAC;IAEhC;;MAEE;IACW,uBAAS,GAAE,SAAS,CAAC;IAEnC;;OAEG;IACW,uBAAS,GAAE,SAAS,CAAC;IAEnC;;OAEG;IACY,uBAAS,GAAE,SAAS,CAAC;IAEpC;;OAEG;IACY,mBAAK,GAAG,OAAO,CAAC;IAE/B;;OAEG;IACY,oBAAM,GAAE,SAAS,CAAC;IAEjC;;OAEG;IACY,mBAAK,GAAG,OAAO,CAAC;IAE9B;;OAEG;IACW,qCAAuB,GAAG,aAAa,CAAC,MAAM,CAAC;IAE7D;;OAEG;IACW,iBAAG,GAAG,KAAK,CAAC;IAE1B;;OAEG;IACW,iBAAG,GAAG,KAAK,CAAC;IAE1B;;OAEG;IACW,iBAAG,GAAG,KAAK,CAAC;IAE1B;;OAEG;IACY,4BAAc,GAAG,WAAW,CAAC;IAE5C;;OAEG;IACY,8BAAgB,GAAG,aAAa,CAAC;IAEhD;;OAEG;IACY,sBAAQ,GAAG,KAAK,CAAC;IAEhC;;OAEG;IACY,qBAAO,GAAG,IAAI,CAAC;IAE9B;;OAEG;IACY,6BAAe,GAAG,YAAY,CAAC;IAE9C;;OAEG;IACY,sBAAQ,GAAG,KAAK,CAAC;IAEhC;;OAEG;IACY,6BAAe,GAAG,YAAY,CAAC;IAE9C;;OAEG;IACY,0BAAY,GAAG,SAAS,CAAC;IAExC;;OAEG;IACY,6BAAe,GAAG,YAAY,CAAC;IAE9C;;OAEG;IACY,4BAAc,GAAG,WAAW,CAAC;IAE5C;;OAEG;IACY,yBAAW,GAAG,QAAQ,CAAC;IAEtC;;OAEG;IACY,mCAAqB,GAAG,iBAAiB,CAAC;IAEzD;;OAEG;IACY,0BAAY,GAAG,QAAQ,CAAC;IAEvC;;OAEG;IACY,6BAAe,GAAG,WAAW,CAAC;IAE7C;;OAEG;IACW,8CAAgC,GAAG,4BAA4B,CAAC;IAE9E;;OAEG;IACY,sCAAwB,GAAG,aAAa,CAAC;IAEvD;;OAEG;IACW,sCAAwB,GAAG,aAAa,CAAC;IAExD;;OAEG;IACY,yCAA2B,GAAG,gBAAgB,CAAC;IAE9D;;OAEG;IACY,yCAA2B,GAAG,gBAAgB,CAAC;IAE/D,oBAAC;KAAA;kBArMmB,aAAa","sourcesContent":["\r\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n/**\r\n  * Class for JOSE constants\r\n  */\r\n export default class JoseConstants {\r\n   \r\n  /**\r\n   * Define JOSE protocol name\r\n   */\r\n   public static Jose = 'JOSE';\r\n   \r\n  /**\r\n   * Define JWE protocol name\r\n   */\r\n   public static Jwe = 'JWE';\r\n   \r\n  /**\r\n   * Define JWS protocol name\r\n   */\r\n   public static Jws = 'JWS';\r\n\r\n  /**\r\n   * Define JOSE algorithm constants\r\n   */\r\n   public static RsaOaep256 = 'RSA-OAEP-256';\r\n\r\n  /**\r\n   * Define JOSE algorithm constants\r\n   */\r\n   public static RsaOaep = 'RSA-OAEP';\r\n\r\n   /**\r\n   * Define JOSE algorithm constants\r\n   */\r\n   public static Rs256 = 'RS256';\r\n\r\n  /**\r\n   * Define JOSE algorithm constants\r\n   */\r\n   public static Rs384 = 'RS384';\r\n\r\n  /**\r\n   * Define JOSE algorithm constants\r\n   */\r\n  public static Rs512 = 'RS512';\r\n\r\n  /**\r\n   * Define JOSE algorithm constants\r\n   */\r\n   public static EdDSA = 'EDDSA';\r\n\r\n  /**\r\n   * Define JOSE algorithm constants\r\n   */\r\n   public static Es256K = 'ES256K';\r\n\r\n   /**\r\n   * Define JOSE algorithm constants\r\n   */\r\n  public static AesGcm128 ='A128GCM';\r\n  \r\n  /**\r\n   * Define JOSE algorithm constants\r\n   */\r\n  public static AesGcm192 ='A192GCM';\r\n  \r\n  /**\r\n   * Define JOSE algorithm constants\r\n   */\r\n   public static AesGcm256 ='A256GCM';\r\n\r\n  /**\r\n   * Define JOSE algorithm constants\r\n   */\r\n   public static Hs256 = 'HS256';\r\n   \r\n  /**\r\n   * Define JOSE algorithm constants\r\n   */\r\n   public static Sha256 ='SHA-256';\r\n   \r\n  /**\r\n   * Define JOSE algorithm constants\r\n   */\r\n   public static Hs512 = 'HS512';\r\n\r\n   /**\r\n    * Define the default signing algorithm\r\n    */\r\n   public static DefaultSigningAlgorithm = JoseConstants.Es256K;\r\n   \r\n   /**\r\n    * Define the JOSE protocol elements\r\n    */\r\n   public static Alg = 'alg';\r\n   \r\n   /**\r\n    * Define the JOSE protocol elements\r\n    */\r\n   public static Kid = 'kid';\r\n   \r\n   /**\r\n    * Define the JOSE protocol elements\r\n    */\r\n   public static Enc = 'enc';\r\n   \r\n   /**\r\n    * Define elements in the JWE Crypto Token\r\n    */\r\n    public static tokenProtected = 'protected'; \r\n   \r\n   /**\r\n    * Define elements in the JWE Crypto Token\r\n    */\r\n    public static tokenUnprotected = 'unprotected'; \r\n   \r\n   /**\r\n    * Define elements in the JWE Crypto Token\r\n    */\r\n    public static tokenAad = 'aad'; \r\n   \r\n   /**\r\n    * Define elements in the JWE Crypto Token\r\n    */\r\n    public static tokenIv = 'iv'; \r\n   \r\n   /**\r\n    * Define elements in the JWE Crypto Token\r\n    */\r\n    public static tokenCiphertext = 'ciphertext'; \r\n   \r\n   /**\r\n    * Define elements in the JWS Crypto Token\r\n    */\r\n    public static tokenTag = 'tag'; \r\n   \r\n   /**\r\n    * Define elements in the JWE Crypto Token\r\n    */\r\n    public static tokenRecipients = 'recipients'; \r\n   \r\n   /**\r\n    * Define elements in the JWS Crypto Token\r\n    */\r\n    public static tokenPayload = 'payload'; \r\n   \r\n   /**\r\n    * Define elements in the JWS Crypto Token\r\n    */\r\n    public static tokenSignatures = 'signatures'; \r\n   \r\n   /**\r\n    * Define elements in the JWS Crypto Token\r\n    */\r\n    public static tokenSignature = 'signature'; \r\n   \r\n   /**\r\n    * Define elements in the JWS Crypto Token\r\n    */\r\n    public static tokenFormat = 'format'; \r\n\r\n   /**\r\n    * Define elements in the JOSE options\r\n    */\r\n    public static optionProtectedHeader = 'ProtectedHeader'; \r\n     \r\n   /**\r\n    * Define elements in the JOSE options\r\n    */\r\n    public static optionHeader = 'Header'; \r\n     \r\n   /**\r\n    * Define elements in the JOSE options\r\n    */\r\n    public static optionKidPrefix = 'KidPrefix'; \r\n\r\n   /**\r\n    * Define elements in the JOSE options\r\n    */\r\n   public static optionContentEncryptionAlgorithm = 'ContentEncryptionAlgorithm'; \r\n   \r\n   /**\r\n    * Define JOSE serialization formats\r\n    */\r\n    public static serializationJwsFlatJson = 'JwsFlatJson'; \r\n   \r\n    /**\r\n     * Define JOSE serialization formats\r\n     */\r\n    public static serializationJweFlatJson = 'JweFlatJson'; \r\n   \r\n   /**\r\n    * Define JOSE serialization formats\r\n    */\r\n    public static serializationJwsGeneralJson = 'JwsGeneralJson'; \r\n   \r\n   /**\r\n    * Define JOSE serialization formats\r\n    */\r\n    public static serializationJweGeneralJson = 'JweGeneralJson'; \r\n      \r\n  }\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a088f4eea0eedc974dc3cb5f00e64d4641cb07ce","contentHash":"16eb4138f756ebd65d8f573a30151ef2d43c44bb50fce3f64c6ac70d30d62073"},"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\W3cCryptoApiConstants.ts":{"path":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\W3cCryptoApiConstants.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":10,"column":42},"end":{"line":42,"column":4}},"2":{"start":{"line":16,"column":4},"end":{"line":16,"column":38}},"3":{"start":{"line":20,"column":4},"end":{"line":20,"column":51}},"4":{"start":{"line":24,"column":4},"end":{"line":24,"column":63}},"5":{"start":{"line":28,"column":4},"end":{"line":28,"column":45}},"6":{"start":{"line":32,"column":4},"end":{"line":32,"column":45}},"7":{"start":{"line":36,"column":4},"end":{"line":36,"column":45}},"8":{"start":{"line":40,"column":4},"end":{"line":40,"column":40}},"9":{"start":{"line":41,"column":4},"end":{"line":41,"column":33}},"10":{"start":{"line":43,"column":0},"end":{"line":43,"column":40}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":10,"column":43},"end":{"line":10,"column":44}},"loc":{"start":{"line":10,"column":49},"end":{"line":42,"column":1}},"line":10}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1},"f":{"0":1},"b":{},"inputSourceMap":{"version":3,"file":"C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\W3cCryptoApiConstants.ts","sources":["C:\\did1\\repos\\VerifiableCredentials-Crypto-SDK-Typescript\\libs\\keys\\lib\\W3cCryptoApiConstants.ts"],"names":[],"mappings":";;AACA;;;gGAGgG;AAChG;;IAEI;AACH;IAAA,MAAqB,qBAAqB;;IACzC;;OAEG;IACY,yBAAG,GAAG,KAAK,CAAC;IAE3B;;OAEG;IACY,6BAAO,GAAG,cAAc,CAAC;IAEvC;;MAEE;IACW,oCAAc,GAAG,mBAAmB,CAAC;IAEnD;;OAEG;IACY,4BAAM,GAAG,SAAS,CAAC;IAElC;;OAEG;IACY,4BAAM,GAAG,SAAS,CAAC;IAElC;;OAEG;IACY,4BAAM,GAAG,SAAS,CAAC;IAElC;;OAEG;IACY,0BAAI,GAAG,MAAM,CAAC;IAC7B,4BAAC;KAAA;kBAnCmB,qBAAqB","sourcesContent":["\r\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n/**\r\n  * Class for W3C Crypto API constants\r\n  */\r\n export default class W3cCryptoApiConstants {\r\n  /**\r\n   * Define W3C JWK constants\r\n   */\r\n   public static Jwk = 'jwk';\r\n\r\n  /**\r\n   * Define W3C algorithm constants\r\n   */\r\n   public static RsaOaep = 'RSA-OAEP-256';\r\n\r\n   /**\r\n   * Define W3C algorithm constants\r\n   */\r\n  public static RsaSsaPkcs1V15 = 'RSASSA-PKCS1-v1_5';\r\n  \r\n  /**\r\n   * Define W3C algorithm constants\r\n   */\r\n   public static Sha256 = 'SHA-256';\r\n  \r\n  /**\r\n   * Define W3C algorithm constants\r\n   */\r\n   public static Sha512 = 'SHA-512';\r\n\r\n  /**\r\n   * Define W3C algorithm constants\r\n   */\r\n   public static AesGcm = 'AES-GCM';\r\n  \r\n  /**\r\n   * Define W3C algorithm constants\r\n   */\r\n   public static Hmac = 'HMAC';\r\n  }\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"e61f7c557ec0f46d18ac846b33d4212963ea4511","contentHash":"29db10e5e887290e2a0db0a57c3b001c2afbb538c7745794d0aa12622875f7b5"}}